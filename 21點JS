// -------- 狀態管理 --------
let deck = [];
let playerHand = [];
let dealerHand = [];
let gameActive = false;
let dealerHidden = true;

// 籌碼與統計
let playerChips = 3000;
let currentBet = 0;
let winCount = 0, loseCount = 0, drawCount = 0;
let betPlaced = false;

// 花色與牌值
const suits = ['♠', '♥', '♦', '♣'];
const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

// -------- 資料顯示 --------
function updateStats() {
    document.getElementById('playerChips').textContent = playerChips;
    document.getElementById('winCount').textContent = winCount;
    document.getElementById('loseCount').textContent = loseCount;
    document.getElementById('drawCount').textContent = drawCount;
}

function updateDisplay() {
    // 玩家牌組
    document.getElementById('playerCards').innerHTML =
        playerHand.map(card => displayCard(card)).join('');
    document.getElementById('playerPoints').textContent = calculateScore(playerHand);

    // 莊家牌組
    let dealerCardsHTML = '';
    for (let i = 0; i < dealerHand.length; i++) {
        if (i === 1 && dealerHidden) {
            dealerCardsHTML += displayCard(null, true);
        } else {
            dealerCardsHTML += displayCard(dealerHand[i]);
        }
    }
    document.getElementById('dealerCards').innerHTML = dealerCardsHTML;

    if (dealerHidden && dealerHand.length > 0) {
        document.getElementById('dealerPoints').textContent = calculateScore([dealerHand[0]]) + ' + ?';
    } else {
        document.getElementById('dealerPoints').textContent = calculateScore(dealerHand);
    }
}

// -------- 下注按鈕邏輯 --------
document.getElementById('betBtn').addEventListener('click', function() {
    const betInput = document.getElementById('betAmount');
    let bet = parseInt(betInput.value, 10);
    if (!gameActive && !betPlaced) {
        if (isNaN(bet) || bet < 10) {
            alert("最少下注10元！");
            return;
        }
        if (bet > playerChips) {
            alert("籌碼不足！");
            return;
        }
        currentBet = bet;
        playerChips -= bet;
        betPlaced = true;
        updateStats();
        document.getElementById('gameStatus').innerHTML = `<h4 class="text-white">下注 ${currentBet} 元，點擊「開始新遊戲」發牌！</h4>`;
        document.getElementById('betBtn').disabled = true;
        document.getElementById('betAmount').disabled = true;
        document.getElementById('newGameBtn').disabled = false;
    }
});

// -------- 牌組處理 --------
function initializeDeck() {
    deck = [];
    for (let suit of suits) {
        for (let value of values) {
            deck.push({
                suit: suit,
                value: value,
                color: (suit === '♥' || suit === '♦') ? 'red' : 'black'
            });
        }
    }
    shuffleDeck();
}
function shuffleDeck() {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
}
function dealCard() {
    return deck.pop();
}
function calculateScore(hand) {
    let score = 0;
    let aces = 0;
    for (let card of hand) {
        if (card.value === 'A') {
            aces++;
            score += 11;
        } else if (['J', 'Q', 'K'].includes(card.value)) {
            score += 10;
        } else {
            score += parseInt(card.value);
        }
    }
    while (score > 21 && aces > 0) {
        score -= 10;
        aces--;
    }
    return score;
}
function displayCard(card, isHidden = false) {
    if (isHidden) {
        return '<div class="playing-card card-back">?</div>';
    }
    if (!card) return '<div class="playing-card card-back">?</div>';
    return `<div class="playing-card ${card.color}">
            <div>${card.value}<br>${card.suit}</div>
        </div>`;
}

// -------- 遊戲流程 --------
function startNewGame() {
    if (!betPlaced) {
        document.getElementById('gameStatus').innerHTML = '<h4 class="text-danger">請先下注！</h4>';
        return;
    }
    initializeDeck();
    playerHand = [];
    dealerHand = [];
    gameActive = true;
    dealerHidden = true;

    playerHand.push(dealCard());
    dealerHand.push(dealCard());
    playerHand.push(dealCard());
    dealerHand.push(dealCard());

    updateDisplay();
    updateButtons();

    if (calculateScore(playerHand) === 21) {
        endGame();
    } else {
        document.getElementById('gameStatus').innerHTML =
            '<h4 class="text-white">你的回合 - 要牌還是停牌？</h4>';
    }
    document.getElementById('newGameBtn').disabled = true; // 避免重複點
}

function hit() {
    if (!gameActive) return;
    playerHand.push(dealCard());
    updateDisplay();

    if (calculateScore(playerHand) > 21) {
        endGame();
    }
}

function stand() {
    if (!gameActive) return;
    dealerHidden = false;
    updateDisplay();

    // 莊家補牌
    while (calculateScore(dealerHand) < 17) {
        dealerHand.push(dealCard());
    }

    updateDisplay();
    endGame();
}

function endGame() {
    gameActive = false;
    dealerHidden = false;
    updateDisplay();
    updateButtons();

    const playerScore = calculateScore(playerHand);
    const dealerScore = calculateScore(dealerHand);

    let message = '';
    let messageClass = '';

    if (playerScore > 21) {
        message = '爆牌！你輸了！';
        messageClass = 'text-danger';
        loseCount++;
        // 籌碼已扣，無需處理
    } else if (dealerScore > 21) {
        message = '莊家爆牌！你贏了！';
        messageClass = 'text-success';
        playerChips += currentBet * 2;
        winCount++;
    } else if (playerScore === 21 && playerHand.length === 2) {
        message = 'BlackJack！你贏了！';
        messageClass = 'text-warning';
        playerChips += Math.floor(currentBet * 2.5);
        winCount++;
    } else if (playerScore > dealerScore) {
        message = '你贏了！';
        messageClass = 'text-success';
        playerChips += currentBet * 2;
        winCount++;
    } else if (playerScore < dealerScore) {
        message = '你輸了！';
        messageClass = 'text-danger';
        loseCount++;
    } else {
        message = '平手！';
        messageClass = 'text-info';
        playerChips += currentBet; // 返還下注
        drawCount++;
    }

    updateStats();

    document.getElementById('gameStatus').innerHTML =
        `<h4 class="${messageClass}">${message}</h4>
         <p class="text-white mt-2">點擊「下注」再玩一局！</p>`;

    // 回到可下注狀態
    betPlaced = false;
    document.getElementById('betBtn').disabled = false;
    document.getElementById('betAmount').disabled = false;
    document.getElementById('newGameBtn').disabled = true;


    // 籌碼歸零提示
    if (playerChips <= 0) {
    document.getElementById('gameStatus').innerHTML +=
        '<p class="text-danger fw-bold mt-2">你已經破產，歡迎諮詢公司貸款服務</p>';
    document.getElementById('betBtn').disabled = true;
    document.getElementById('betAmount').disabled = true;
    document.getElementById('hitBtn').disabled = true;
    document.getElementById('standBtn').disabled = true;
    // 顯示補充籌碼按鈕
    document.getElementById('addChipsBtn').style.display = 'inline-block';
} else {
    // 沒破產時補充鈕隱藏
    document.getElementById('addChipsBtn').style.display = 'none';
}
document.getElementById('betAmount').value = "";
}


// -------- 按鈕與滾動 --------
function updateButtons() {
    document.getElementById('hitBtn').disabled = !gameActive;
    document.getElementById('standBtn').disabled = !gameActive;
    document.getElementById('newGameBtn').disabled = !betPlaced || gameActive;
}

document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// -------- 事件監聽 --------
document.getElementById('newGameBtn').addEventListener('click', startNewGame);
document.getElementById('hitBtn').addEventListener('click', hit);
document.getElementById('standBtn').addEventListener('click', stand);

// -------- 初始化 --------
document.getElementById('newGameBtn').disabled = true;
updateButtons();
updateStats();

 document.getElementById('addChipsBtn').addEventListener('click', function () {
    const addAmount = 1000;
    playerChips += addAmount;
    updateStats();
    alert('已撥款，歡迎您繼續遊玩 +' + addAmount + '！');
    // 補充後自動隱藏補充鈕
    document.getElementById('addChipsBtn').style.display = 'none';
    // 重新啟用下注輸入/按鈕
    document.getElementById('betBtn').disabled = false;
    document.getElementById('betAmount').disabled = false;
});
document.getElementById('betAmount').value = "";

